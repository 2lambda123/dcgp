{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A first tutorial\n",
    "In this first tutorial we will make use of a classic Evolutionary to evolve a model for our input data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some necessary imports.\n",
    "import dcgpy\n",
    "import pygmo as pg\n",
    "# Sympy is nice to have for basic symbolic manipulation.\n",
    "from sympy import init_printing\n",
    "from sympy.parsing.sympy_parser import *\n",
    "init_printing()\n",
    "# Fundamental for plotting.\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1 - The data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We load our data from some available ones shipped with dcgpy.\n",
    "# In this particular case we use the problem chwirut2 from \n",
    "# (https://www.itl.nist.gov/div898/strd/nls/data/chwirut2.shtml)\n",
    "X, Y = dcgpy.generate_chwirut2()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And we plot them as to visualize the problem.\n",
    "_ = plt.plot(X, Y, '.')\n",
    "_ = plt.title('54 measurments')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2 - The symbolic regression problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We define our kernel set, that is the mathematical operators we will\n",
    "# want our final model to possibly contain. What to choose in here is left\n",
    "# to the competence and knowledge of the user. A list of kernels shipped with dcgpy \n",
    "# can be found on the online docs. The user can also define its own kernels (see the corresponding tutorial).\n",
    "ss = dcgpy.kernel_set_double([\"sum\", \"diff\", \"mul\", \"pdiv\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tData dimension (points): 1\n",
      "\tData dimension (labels): 1\n",
      "\tData size: 54\n",
      "\tKernels: [sum, diff, mul, pdiv]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# We instantiate the symbolic regression optimization problem (note: many important options are here not\n",
    "# specified and thus set to their default values)\n",
    "udp = dcgpy.symbolic_regression(points = X, labels = Y, kernels=ss())\n",
    "print(udp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3 - The search algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We instantiate here the evolutionary strategy we want to use to search for models.\n",
    "uda  = dcgpy.es4cgp(gen = 10000, mut_n = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4 - The search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "prob = pg.problem(udp)\n",
    "algo = pg.algorithm(uda)\n",
    "# Note that the screen output will happen on the terminal, not on your Jupyter notebook.\n",
    "# It can be recovered afterwards from the log.\n",
    "algo.set_verbosity(10)\n",
    "pop = pg.population(prob, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop = algo.evolve(pop)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5 - Inspecting the solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\left[ \\frac{45}{x_{0}} - \\frac{2}{3 x_{0}^{3}}\\right]$"
      ],
      "text/plain": [
       "⎡45     2  ⎤\n",
       "⎢── - ─────⎥\n",
       "⎢x₀       3⎥\n",
       "⎣     3⋅x₀ ⎦"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets have a look to the symbolic representation of our model (using sympy)\n",
    "parse_expr(udp.prettier(pop.champion_x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And lets see what our model actually predicts on the inputs\n",
    "Y_pred = udp.predict(X, pop.champion_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets comapre to the data\n",
    "_ = plt.plot(X, Y_pred, 'r.')\n",
    "_ = plt.plot(X, Y, '.', alpha=0.2)\n",
    "_ = plt.title('54 measurments')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6 - Recovering the log\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we get the log of the latest call to the evolve\n",
    "log = algo.extract(dcgpy.es4cgp).get_log()\n",
    "gen = [it[0] for it in log]\n",
    "loss = [it[2] for it in log]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And here we plot, for example, the generations against the best loss\n",
    "_ = plt.semilogy(gen, loss)\n",
    "_ = plt.title('last call to evolve')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
