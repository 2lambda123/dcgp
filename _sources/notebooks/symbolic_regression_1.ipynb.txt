{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Symbolic Regression (via Evolutionary Strategy)\n",
    "In this first tutorial we will make use of a classic Evolutionary to evolve a model for our input data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some necessary imports.\n",
    "import dcgpy\n",
    "import pygmo as pg\n",
    "# Some nice to have for symbolic manipulation.\n",
    "from sympy import init_printing\n",
    "from sympy.parsing.sympy_parser import *\n",
    "init_printing()\n",
    "# Fundamental for plotting.\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1 - The data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We load our data from some available ones shipped with dcgpy.\n",
    "# In this particular case we use the problem chwirut2 from \n",
    "# (https://www.itl.nist.gov/div898/strd/nls/data/chwirut2.shtml)\n",
    "X, Y = dcgpy.generate_chwirut2()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And we plot them as to visualize the problem.\n",
    "_ = plt.plot(X, Y, '.')\n",
    "_ = plt.title('54 measurments')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2 - The symbolic regression problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We define our kernel set, that is the mathematical operators we will\n",
    "# want our final model to possibly contain. What to choose in here is left\n",
    "# to the competence and knowledge of the user. A list of kernels shipped with dcgpy \n",
    "# can be found on the online docs. The user can also define its own kernels (see the corresponding tutorial).\n",
    "ss = dcgpy.kernel_set_double([\"sum\", \"diff\", \"mul\", \"pdiv\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tData dimension (points): 1\n",
      "\tData dimension (labels): 1\n",
      "\tData size: 54\n",
      "\tKernels: [sum, diff, mul, pdiv]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# We instantiate the symbolic regression optimization problem (note: many important options are here not\n",
    "# specified and thus set to their default values)\n",
    "udp = dcgpy.symbolic_regression(points = X, labels = Y, kernels=ss())\n",
    "print(udp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3 - The search algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We instantiate here the evolutionary strategy we want to use to search for models.\n",
    "uda  = dcgpy.es4cgp(gen = 10000, mut_n = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4 - The search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "prob = pg.problem(udp)\n",
    "algo = pg.algorithm(uda)\n",
    "# Note that the screen output will happen on the terminal, not on your Jupyter notebook.\n",
    "# It can be recovered afterwards from the log.\n",
    "algo.set_verbosity(10)\n",
    "pop = pg.population(prob, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop = algo.evolve(pop)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5 - Inspecting the solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\left[ \\frac{40 + \\frac{16}{x_{0}} - \\frac{8}{x_{0}^{2}}}{x_{0}}\\right]$"
      ],
      "text/plain": [
       "⎡     16    8 ⎤\n",
       "⎢40 + ── - ───⎥\n",
       "⎢     x₀     2⎥\n",
       "⎢          x₀ ⎥\n",
       "⎢─────────────⎥\n",
       "⎣      x₀     ⎦"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets have a look to the symbolic representation of our model (using sympy)\n",
    "\n",
    "parse_expr(udp.prettier(pop.champion_x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And lets see what our model actually predicts on the inputs\n",
    "Y_pred = udp.predict(X, pop.champion_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets comapre to the data\n",
    "_ = plt.plot(X, Y_pred, 'r.')\n",
    "_ = plt.plot(X, Y, '.', alpha=0.2)\n",
    "_ = plt.title('54 measurments')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6 - Recovering the log\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we get the log of the latest call to the evolve\n",
    "log = algo.extract(dcgpy.es4cgp).get_log()\n",
    "gen = [it[0] for it in log]\n",
    "loss = [it[2] for it in log]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And here we plot, for example, the generations against the best loss\n",
    "_ = plt.semilogy(gen, loss)\n",
    "_ = plt.title('last call to evolve')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACYAAAAzCAYAAAD7JnqGAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADFElEQVRYCe2Zj3HTMBTGY64D5GCDsEG5btBuAO0EkA3gmIBLNwhMwNEN0g2AbgAbNGQD8/sSWSfLf/TkOBzX87t7jvT09Onze7JsKcVsNpujDSnLctcwnsBQFEXr+BrqF1pGuobY7F8o426iscVl84yL5AoSRaDLg/n0V8asjc2I+7ErYoMYkIZzdJ3qbPULcY4iBtA39HkI2FG2+vnug4kRhfcepadg9YshBhFTagDSU9v75Fr9YlKqDyJGvxsm7ec2wMhm9Yu6DSDmUmOZ8Ep10q/ByBmyIgapBf12ROt3F6DsVr8+jCxiAC2NKbT6dXIzEyMK70BJpsbq18nINZiIudTMjSlM+qVIqf3M4oSP5tYFBLVQhqJlY+Hsmnd67yX9uMEPIUhb2UQMoHs6S2sCoT8Y7ml/EzRY/YIuzaIplc1u3qJPls7PFu918LH4+S6DiBGpNaq0SS6VSrTxirL6HWDqV1Mq6134eCtL02eR1S/GV31QxNqAxrZNxHIjOkVsilhuBHL9k+sYi6T2eaMLa1zRB5oklgLoAz+mbXoqc6M3RWyKWG4Ecv2nOfZkIpZc+as75dWkzYQ2vZIL9C26QG9QyXfeEneH4vHXnDm2YuBbqUigX9BL6tojivQKHU1MESNailQ48I76a1RRk+hUMWzXwUpVf6TthbsB+ZrERAykHwCHJzyvsD1gE0HtmsINr0jpRh6xK7qqa4u3oX6lukVMqQTwIQK7pv41soVVRcvvyOmvsshpTprERCxE0t1T15zyEx3bXCo/N7jKYYTVpOjqrMMkSWJu0A2/IiTRZjc+vPtIVDSwZE/wUKxdt9Q0F02SJAaKCEm3LioawIsjrKc0JSLVRbrR96xhaRo0P3QQvI8YkVlCRhHUId5PdIvNp5V6FTmKNRGpOL01h7ii/5K0Ho323xF4Op46DzGpa++wCG1tZXz0RPv/kiiPKp9A20dYqC7ddxAxR8ySymzGELiFzEpKZy2wL9FqMTbhnYSYRoZc8jizj2FFTOeotScG4K5J3IeX3RaPC4Dn8V/+kfoXg5P3jMX1pTgAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\left[ \\frac{44}{x_{0}}\\right]$"
      ],
      "text/plain": [
       "⎡44⎤\n",
       "⎢──⎥\n",
       "⎣x₀⎦"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parse_expr(udp.prettier(pop.champion_x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
