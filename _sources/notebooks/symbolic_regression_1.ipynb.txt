{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Symbolic Regression (via Evolutionary Strategy)\n",
    "In this first tutorial we will make use of a classic Evolutionary to evolve a model for our input data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some necessary imports.\n",
    "import dcgpy\n",
    "import pygmo as pg\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1 - The data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We load our data from some available ones shipped with dcgpy.\n",
    "# In this particular case we use the problem chwirut2 from \n",
    "# (https://www.itl.nist.gov/div898/strd/nls/data/chwirut2.shtml)\n",
    "X, Y = dcgpy.generate_chwirut2()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And we plot them as to visualize the problem.\n",
    "_ = plt.plot(X, Y, '.')\n",
    "_ = plt.title('54 measurments')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2 - The symbolic regression problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We define our kernel set, that is the mathematical operators we will\n",
    "# want our final model to possibly contain. What to choose in here is left\n",
    "# to the competence and knowledge of the user. A list of kernels shipped with dcgpy \n",
    "# can be found on the online docs. The user can also define its own kernels (see the corresponding tutorial).\n",
    "ss = dcgpy.kernel_set_double([\"sum\", \"diff\", \"mul\", \"pdiv\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tData dimension (points): 1\n",
      "\tData dimension (labels): 1\n",
      "\tData size: 54\n",
      "\tKernels: [sum, diff, mul, pdiv]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# We instantiate the symbolic regression optimization problem (note: many important options are here not\n",
    "# specified and thus set to their default values)\n",
    "udp = dcgpy.symbolic_regression(points = X, labels = Y, kernels=ss())\n",
    "print(udp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3 - The search algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We instantiate here the evolutionary strategy we want to use to search for models.\n",
    "uda  = dcgpy.es4cgp(gen = 10000, mut_n = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4 - The search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "prob = pg.problem(udp)\n",
    "algo = pg.algorithm(uda)\n",
    "# Note that the screen output will happen on the terminal, not on your Jupyter notebook.\n",
    "# It can be recovered afterwards from the log.\n",
    "algo.set_verbosity(10)\n",
    "pop = pg.population(prob, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop = algo.evolve(pop)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5 - Inspecting the solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'[1 + (3 + 2*x0**(-1))*(3 - (x0 - (3 + 2*x0**(-1))) + x0**(-1)) + 2*x0**(-1)]'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets have a look to the symbolic represenattion of our model\n",
    "udp.prettier(pop.champion_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And lets see what our model actually predicts on the inputs\n",
    "Y_pred = udp.predict(X, pop.champion_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets comapre to the data\n",
    "_ = plt.plot(X, Y_pred, 'r.')\n",
    "_ = plt.plot(X, Y, '.', alpha=0.2)\n",
    "_ = plt.title('54 measurments')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6 - Recovering the log\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we get the log of the latest call to the evolve\n",
    "log = algo.extract(dcgpy.es4cgp).get_log()\n",
    "gen = [it[0] for it in log]\n",
    "loss = [it[2] for it in log]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And here we plot, for example, the generations against the best loss\n",
    "_ = plt.semilogy(gen, loss)\n",
    "_ = plt.title('last call to evolve')\n",
    "_ = plt.xlabel('metal distance')\n",
    "_ = plt.ylabel('ultrasonic response')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
